import { createElement } from 'lwc';
import AriaObserverContainer from 'lightningtest/ariaObserverContainer';

function createTestElement(props = {}) {
    const element = createElement('lightningtest-aria-observer-container', {
        is: AriaObserverContainer,
    });
    Object.assign(element, props);
    document.body.appendChild(element);

    return element;
}

describe('AriaObserver', () => {
    if (process.env.NATIVE_SHADOW) {
        describe('native shadow', () => {
            it('should copy the label content over and set aria-labelledby to be the internal label element', () => {
                const container = createTestElement();
                const testElement = container.testElement;

                expect(container.labelContent).toEqual(
                    testElement.labelContent
                );
            });

            it('should react to label id changes', async () => {
                const container = createTestElement();
                const oldLabelContent = container.labelContent;

                container.updateAriaLabelledby('alt-label-id');
                await Promise.resolve();

                const testElement = container.testElement;

                expect(container.labelContent).not.toEqual(oldLabelContent);
                expect(container.labelContent).toEqual(
                    testElement.labelContent
                );
            });

            it('should work with multiple label ids', async () => {
                const container = createTestElement();
                container.updateAriaLabelledby('id-label alt-label-id');
                await Promise.resolve();

                const testElement = container.testElement;
                expect(testElement.labelContent).toEqual('Foo\nBar');
            });

            it('should work with label ids appearing in the opposite of document order', async () => {
                const container = createTestElement();
                container.updateAriaLabelledby('alt-label-id id-label');
                await Promise.resolve();

                const testElement = container.testElement;
                expect(testElement.labelContent).toEqual('Bar\nFoo');
            });

            it('should update the internal label content when external content changes', async () => {
                const container = createTestElement();
                container.updateLabelContent();

                // wait for component rehydration
                await Promise.resolve();
                // wait for mutation observer callback
                await Promise.resolve();

                const testElement = container.testElement;
                expect(container.labelContent).toEqual(
                    testElement.labelContent
                );
            });
        });
    } else {
        describe('synthetic shadow', () => {
            it('should set aria-labelledby to be the external label id', () => {
                const container = createTestElement();
                const testElement = container.testElement;

                expect(container.labelId).toEqual(testElement.labelId);
            });

            it('should react to label id changes', async () => {
                const container = createTestElement();
                const oldLabelId = container.labelId;

                container.updateAriaLabelledby('alt-label-id');
                await Promise.resolve();

                const testElement = container.testElement;

                expect(container.labelId).not.toEqual(oldLabelId);
                expect(container.labelId).toEqual(testElement.labelId);
            });

            it('should keep the label id unchanged when the label content changes', async () => {
                const container = createTestElement();
                container.updateLabelContent();
                await Promise.resolve();

                const testElement = container.testElement;
                expect(container.labelId).toEqual(testElement.labelId);
            });

            it('should keep track of the live id', () => {
                const container = createTestElement();
                const testElement = container.testElement;
                expect(testElement.labelId).toEqual(testElement.liveId);
            });
        });
    }
});
